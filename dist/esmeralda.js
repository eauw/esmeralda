// Generated by CoffeeScript 2.3.2
(function() {
  // general node/npm imports
  var Promise, activate, argv, ask, assumeYes, automist, client, create, createAlias, createIndex, deleteAlias, deleteAliasIfExists, deleteIndices, elasticsearch, existsAlias, filterLastDays, findIndices, format, fs, getAlias, getIndexCount, help, hostname, index, list, mapIndicesToAliases, minimist, moment, newIndexName, older, path, patternAlias, patternTimestamp, port, printIndicesWithAliases, readAlias, readme, remove, stop, stopIfNotString, swap, timestamp, writeAlias, yaml;

  fs = require("fs");

  path = require("path");

  Promise = require('bluebird');

  elasticsearch = require("elasticsearch");

  moment = require("moment");

  // cli options from readme
  yaml = require("js-yaml");

  readme = yaml.load(fs.readFileSync(path.join(__dirname, '../README.yaml')));

  automist = require("automist")(readme);

  minimist = require("minimist");

  argv = minimist(process.argv.slice(2), automist.options());

  ({help, list, create, activate, swap, remove, hostname, port, older} = argv);

  // cause yes is reserved in cs
  assumeYes = argv.yes;

  // elasticsearch client
  if (hostname == null) {
    hostname = "127.0.0.1";
  }

  if (port == null) {
    port = 9200;
  }

  client = new elasticsearch.Client({
    host: process.env.ES_URL || `${hostname}:${port}`,
    defer: function() {
      return Promise.defer();
    }
  });

  //, log: "trace"
  ({deleteAlias, createAlias, deleteAliasIfExists, findIndices, createIndex, getAlias, existsAlias, deleteIndices} = require("./esActions")(client));

  ({printIndicesWithAliases, stop, stopIfNotString, format, patternTimestamp, patternAlias, mapIndicesToAliases, filterLastDays, ask, getIndexCount} = require("./utils"));

  ask = ask(assumeYes);

  // default limit for days
  if (older == null) {
    older = 1;
  }

  // check arguments for a matching action
  if (help) {
    console.log(automist.help());
    stop();
  } else if (list || typeof list === "string") {
    index = list === "" ? "*" : list;
    findIndices(index).then(printIndicesWithAliases).then(stop);
  } else if (create) {
    stopIfNotString(create);
    timestamp = moment().format(format);
    newIndexName = `${create}-${timestamp}`;
    writeAlias = `${create}-write`;
    console.log("Creating index called '%s'.", newIndexName);
    createIndex(newIndexName).then(function() {
      return deleteAliasIfExists(writeAlias);
    }).then(function() {
      return createAlias(writeAlias, newIndexName);
    }).then(stop);
  } else if (activate) {
    readAlias = (patternAlias.exec(activate))[0];
    deleteAliasIfExists(readAlias).then(function() {
      return createAlias(readAlias, activate);
    }).then(stop);
  } else if (swap) {
    console.log("swap", swap);
    writeAlias = `${swap}-write`;
    existsAlias(writeAlias).then(function(exists) {
      if (!exists) {
        console.error("Found no existing write alias '%s', which could be swapped to!", writeAlias);
        stop(1);
      }
      return exists;
    }).then(function() {
      return deleteAliasIfExists(swap);
    }).then(function() {
      return getAlias(writeAlias);
    }).then(mapIndicesToAliases).then(function(result) {
      if (result.length > 1) { // earlier we checked, if the alias exists. so it can't be 0
        console.error("Found more than 1 index a write alias is pointing to!");
        stop(1);
      }
      for (index in result) {
        return index;
      }
    }).then(function(index) {
      return createAlias(swap, index);
    }).then(function() {
      return deleteAlias(writeAlias);
    }).then(stop);
  } else if (remove) {
    index = remove;
    findIndices(index).then(function(result) {
      return filterLastDays(result, older);
    }).then(function({valid, expired}) {
      var expiredCount, validCount;
      validCount = getIndexCount(valid);
      if (validCount > 0) {
        console.log("\nFollowing %d index/indices are still valid:", validCount);
        printIndicesWithAliases(valid);
      }
      expiredCount = getIndexCount(expired);
      if (expiredCount > 0) {
        console.log("\nFollowing %d index/indices are expired and going to be deleted:", expiredCount);
        printIndicesWithAliases(expired);
      }
      return {expired, expiredCount};
    }).then(function({expired, expiredCount}) {
      if (expiredCount === 0) {
        return stop();
      } else {
        return ask(`\nDo you really want to delete ${expiredCount} index/indices? [y/N]: `).then(function(answer) {
          return {answer, expired};
        });
      }
    }).then(function({answer, expired}) {
      console.log(answer);
      if (answer.toLowerCase() === "y") {
        console.log("\nDeleting index/indicesâ€¦");
        return deleteIndices(expired);
      } else {
        return console.log("Canceled deleting index/indices.");
      }
    }).then(stop);
  } else {
    stop();
  }

}).call(this);
